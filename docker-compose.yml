# PostgreSQL Docker Compose Configuration
# This setup provides a robust PostgreSQL database container with health checks,
# optimized configuration, and proper resource management.

services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres-dev
    hostname: postgres-dev

    environment:
      # Basic PostgreSQL configuration
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-myapp}

      # Performance and configuration settings
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata

      # Timezone configuration
      - TZ=${TZ:-UTC}

      # Additional PostgreSQL settings
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - ./postgres-conf/postgresql.conf:/etc/postgresql/postgresql.conf:ro

    ports:
      - "${POSTGRES_PORT:-5432}:5432"

    networks:
      - postgres_network

    # Health check to ensure PostgreSQL is ready
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-myapp}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    restart: unless-stopped

    # Security options
    security_opt:
      - no-new-privileges:true

    # Read-only root filesystem for security (with tmpfs for writable areas)
    tmpfs:
      - /tmp
      - /var/run/postgresql

networks:
  postgres_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
